// Copyright 2020 Mobilinkd LLC.
// Copyright 2022 Open Research Institute, Inc.

#pragma once

#include "Numerology.h"

#include <array>
#include <cstdint>
#include <cstddef>

namespace mobilinkd
{

namespace detail
{

// Opulent Voice randomization matrix.
// Generated at random using MATLAB live script
// OpulentVoiceNumerology.mlx
inline auto DC = std::array<uint8_t, stream_type4_bytes> {
    0xA3, 0x81, 0x5C, 0xC4, 0xC9, 0x08, 0x0E, 0x53,
    0xCC, 0xA1, 0xFB, 0x29, 0x9E, 0x4F, 0x16, 0xE0,
    0x97, 0x4E, 0x2B, 0x57, 0x12, 0xA7, 0x3F, 0xC2,
    0x4D, 0x6B, 0x0F, 0x08, 0x30, 0x46, 0x11, 0x56,
    0x0D, 0x1A, 0x13, 0xE7, 0x50, 0x97, 0x61, 0xF3,
    0xBE, 0xE3, 0x99, 0xB0, 0x64, 0x39, 0x22, 0x2C,
    0xF0, 0x09, 0xE1, 0x86, 0xCF, 0x73, 0x59, 0xC2,
    0x5C, 0x8E, 0xE3, 0xD7, 0x3F, 0x70, 0xD4, 0x27,
    0xC2, 0xE0, 0x81, 0x92, 0xDA, 0xFC, 0xCA, 0x5A,
    0x80, 0x42, 0x83, 0x15, 0x0F, 0xA2, 0x9E, 0x15,
    0x9C, 0x8B, 0xDB, 0xA4, 0x46, 0x1C, 0x10, 0x9F,
    0xB3, 0x47, 0x6C, 0x5E, 0x15, 0x12, 0x1F, 0xAD,
    0x38, 0x3D, 0x03, 0xBA, 0x90, 0x8D, 0xBE, 0xD3,
    0x65, 0x23, 0x32, 0xB8, 0xAB, 0x10, 0x62, 0x7E,
    0xC6, 0x26, 0x7C, 0x13, 0xC9, 0x65, 0x3D, 0x15,
    0x15, 0xED, 0x35, 0xF4, 0x57, 0xF5, 0x58, 0x11,
    0x9D, 0x8E, 0xE8, 0x34, 0xC9, 0x59, 0xF8, 0xD6,
    0xB6, 0x37, 0x04, 0x36, 0x89, 0x1C, 0xDA, 0xE9,
    0x56, 0x78, 0x01, 0x50, 0x7C, 0x43, 0xAF, 0xE9,
    0x92, 0x44, 0xED, 0x11, 0xA0, 0xF2, 0x84, 0xF4,
    0x46, 0x87, 0xE9, 0x37, 0xD3, 0x24, 0x70, 0xE0,
    0xB4, 0x7F, 0x9C, 0x14, 0x3E, 0x07, 0xD8, 0x04,
    0x8D, 0x1F, 0x96, 0x9F, 0xBF, 0x50, 0xEA, 0xC8,
    0x1A
    };

}

template <size_t N = stream_type4_size>
struct OPVRandomizer
{
    std::array<int8_t, N> dc_;

    OPVRandomizer()
    {
        size_t i = 0;
        for (auto b : detail::DC)
        {
            for (size_t j = 0; j != 8; ++j)
            {
                dc_[i++] = (b >> (7 - j)) & 1 ? -1 : 1;
            }
        }
    }

    // Randomize and derandomize are the same operation.
    void operator()(std::array<int8_t, N>& frame)
    {
        for (size_t i = 0; i != N; ++i)
        {
            frame[i] *= dc_[i];
        }
    }

    void randomize(std::array<int8_t, N>& frame)
    {
        for (size_t i = 0; i != N; ++i)
        {
            frame[i] ^= (dc_[i] == -1);
        }
    }

};

template <size_t N = 46>
struct OPVByteRandomizer
{
    // Randomize and derandomize are the same operation.
    void operator()(std::array<uint8_t, N>& frame)
    {
        for (size_t i = 0; i != N; ++i)
        {
            for (size_t j = 8; j != 0; --j)
            {
                uint8_t mask = 1 << (j - 1);
                frame[i] = (frame[i] & ~mask) | ((frame[i] & mask) ^ (detail::DC[i] & mask));
            }
        }
    }
};


} // mobilinkd
